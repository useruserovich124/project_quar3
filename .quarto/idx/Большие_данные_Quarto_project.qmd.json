{"title":"Исследование рейсов авиакомпаний Нью-Йорка 2023 года","markdown":{"yaml":{"title":"Исследование рейсов авиакомпаний Нью-Йорка 2023 года","author":["А.Ц. Жалсапов","М.Р. Зигангиров"],"format":{"html":{"code-fold":true,"toc":true,"link-external-newwindow":true,"abstract":"В статье применяются методы анализа данных с помощью языка программирования R и технической системы Quarto для закрепления навыков, предусмотренные в курсе \"Большие данные и аналитика\".\n\nКраткая информация о датасете, над которым проводится анализ: В апреле 2025 года появился новый датасет \"nycflights23\". Он почти идентичен другому датасету \"nycflights13\" (данные о рейсах авиалиний в Нью-Йорке 2013 года). Различие состоит в \"свежести\" данных с разницей 10 лет, что делает такой анализ данных более актуальным.\n"}},"execute":{"message":false,"warning":false,"echo":true},"editor":"visual"},"headingText":"Введение","containsRefs":false,"markdown":"\n\n\nДля начала работы стоит составить цель и задачи анализа данных, чтобы ориентироваться на них при исследовании. Цель: проанализировать данные, составить выводы. Первичные задачи: Выявить зависимости задержек по авиакомпаниям, загруженность в зависимости от времени суток, предсказание задержки вылета и прибытия рейсов.\n\n[Информация о данных](https://cran.r-project.org/web/packages/nycflights23/nycflights23.pdf)\n\nЗагрузка необходимых библиотек:\n\n```{r}\nlibrary(nycflights23)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggsci)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(ranger)\n```\n\n# Топ авиакомпаний по задерживанию рейсов\n\nКод выводит авиакомпании, выводя лидера по задержке рейсов.\n```{r}\n# Расчёт средней задержки при вылете и прилёте для каждой авиакомпании\ndata <- flights |> \n  group_by(carrier) |> \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    flight_count = n()\n  ) |> \n  arrange(desc(avg_arr_delay))\n\ndata <- data |> \n  left_join(airlines, by = \"carrier\")\n\n# Просмотр топ-10 авиакомпаний с наибольшей средней задержкой при прилёте\nhead(data, 14)\n```\nСудя по результату, средняя задержка рейсов от авиакомпании Frontier Airlines Inc. занимает самое высокое положение среди рейсов от других авиакомпаний.\n\nДальше создается график для отображения данных результатов: средние задержки рейсов разных авиакомпаний с различными кол-вами рейсов.\n\n```{r}\n#| label: Средние задержки по авиакомпаниям\n#| fig-cap: \"График 1\"\nggplot(data, aes(x = avg_dep_delay, y = avg_arr_delay, \n                  color = name, size = flight_count)) +\n  geom_point(alpha = 0.6) +\n  theme_bw() +\n  labs(\n    color = \"Авиакомпания\",\n    size = \"Счётчик\\nрейсов\",\n    x = \"Средняя задержка вылета (мин)\",\n    y = \"Средняя задержка прилёта (мин)\",\n    title = \"Средние задержки по авиакомпаниям\"\n  ) +\n   scale_color_d3(palette = \"category20\") +\n  scale_size_continuous(range = c(2, 10), breaks = c(5000, 10000, 20000, 40000)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"vertical\",\n    legend.title = element_text(size = 7),\n    legend.text = element_text(size = 6)\n  )\n```\nКак и в таблице-топе авиакомпания Frontier Airlines Inc. также содержит наибольшое количество средних задерживаемых минут, но она содержит не большое количество рейсов, судя по размеру точки на графике, которая зависит от числа рейсов определенной компании.\n\nДалее создаётся график задержек рейсов различных авиакомпаний по месяцам, чтобы узнать ситуацию на все месяца.\n```{r}\n#| label: Расчёт средней задержки при вылете по месяцам\n#| fig-cap: \"График 2\"\nmonthly_delays <- flights |> \n  left_join(airlines, by = \"carrier\") |> \n  group_by(month) |> \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    carrier,\n    name\n  )\n\n# График средней задержки по месяцам\nggplot(monthly_delays, aes(x = month)) +\n  geom_line(aes(y = avg_dep_delay, color = \"Вылет\")) +\n  geom_line(aes(y = avg_arr_delay, color = \"Прибытие\")) +\n  facet_wrap(~name) +\n  labs(\n    title = \"Средняя задержка по месяцам (2023)\",\n    x = \"Месяц\",\n    y = \"Средняя задержка (мин)\",\n    color = \"Тип задержки\") +\n  scale_x_continuous(breaks = 1:12) +\n  theme_minimal()\n```\nСудя по \"графикам\", все компании, кроме одного, имеют одинаковую динамику средней задержки в зависимости от месяца. Месяц, когда происходит пик по задержке рейсов - это сентябрь (7-й месяц). \n\nРейсы от авиакомпании Envoy Air имеют отличную от рейсов других компаний структуру динамики задержек. Например, самый пик происходит в двух месяцев: май и ноябрь.\n\nУ всех компаний с одинаковой динамикой больше задержек вылета, чем прибытия.\n\nДалее идет подготовка данных к графику, показывающий зависимость задержек от времени дня.\n```{r}\n# Подготовка данных\nflights_hourly <- flights |>\n  left_join(airlines, by = \"carrier\") |> \n  mutate(hour_dep = floor(dep_time / 100)) |>\n  filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>\n  group_by(name, hour_dep) |>\n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    n = n(),\n    .groups = \"drop\"\n  )\n\n# Долгий формат для визуализации\nflights_long <- flights_hourly |>\n  pivot_longer(\n    cols = starts_with(\"avg_\"),\n    names_to = \"type\",\n    values_to = \"delay\"\n  )\n```\n\nСам график: \n```{r}\n#| label: Средняя задержка по времени суток и авиакомпании\n#| fig-cap: \"График 3\"\nggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +\n  geom_line(size = 1) +\n  facet_wrap(~ name) +\n  labs(\n    title = \"Средняя задержка по времени суток и авиакомпании\",\n    x = \"Час дня (вылет)\",\n    y = \"Средняя задержка (минуты)\",\n    color = \"Тип задержки\"\n  ) +\n  scale_color_manual(\n    values = c(\"avg_dep_delay\" = \"lightblue\", \"avg_arr_delay\" = \"pink\"),\n    labels = c(\"Вылет\", \"Прибытие\")\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.position = \"bottom\"\n  )\n```\nСитуация стабильная в перспективе разницы вылета и прибытия: их линии динамики совпадают и редко и слабо расходятся в отдельнызх случаях.\n\nОднако уже большая часть графиков отличается в плане динамики линий: в одних линия почти горизонтальная, а в других она сильно изгибается. Наблюдается тенденция, где пик линий динамик происходит в ранние часы дня, оппозиционо у разных компаний она происходит в разные части утренних часов. \n \nАвиакомпания Frontier Airlines Inc. имеет самую динамичную линию из всех рейсов, то есть имеет больше всего роста и спада.  \n\n# Предсказание задержки вылета и прибытия\n\nВ этой секции мы построим модель машинного обучения для предсказания задержки вылета. Мы будем использовать облегченную версию подхода для быстрой демонстрации.\n\nОпределение функции предобработки данных для моделирования. Эта функция специально разработана для подготовки данных к моделированию, включая сэмплирование и преобразование признаков.\n\n**Создаем функцию `preprocess_flights_data_for_model`**, которая стандартизирует процесс подготовки данных перед их использованием в модели машинного обучения. Функция включает **сэмплирование данных, фильтрацию пропущенных значений и выбросов, создание новых признаков и преобразование категориальных переменных** в формат, пригодный для моделирования.\n\n```{r}\npreprocess_flights_data_for_model <- function(data, sample_fraction = 0.1) {\n  message(\"Начало предобработки данных для моделирования...\")\n\n  # 1. Сэмплирование данных для ускорения\n  if (sample_fraction < 1) {\n    data <- data |>  sample_frac(sample_fraction, replace = FALSE)\n    message(paste0(\"Используется подмножество данных (\", round(sample_fraction*100), \"% от оригинала): \", nrow(data), \" строк.\"))\n  }\n\n  # 2. Базовая фильтрация отсутствующих значений для ключевых переменных\n  data <- data |> \n    filter(!is.na(dep_delay), !is.na(arr_delay), !is.na(air_time), !is.na(distance))\n\n  # 3. Умеренная фильтрация аномальных задержек (можно настроить)\n  data <- data |> \n    filter(dep_delay > -60, dep_delay < 240) # Задержки от -60 до 240 минут\n\n  # 4. Выбор и преобразование признаков\n  data <- data |> \n    mutate(\n      dep_hour = floor(sched_dep_time / 100),\n      flight_date = make_date(year, month, day),\n      day_of_week = wday(flight_date, label = TRUE)\n    ) |> \n    select(dep_delay, month, day, dep_hour, day_of_week, carrier, origin, dest, distance, air_time) |> \n    na.omit() \n\n  # 5. Преобразование категориальных переменных в факторы\n  data <- data |> \n    mutate(\n      carrier = as.factor(carrier),\n      origin = as.factor(origin),\n      dest = as.factor(dest),\n      month = as.factor(month),\n      day = as.factor(day), \n      dep_hour = as.factor(dep_hour),\n      day_of_week = as.factor(day_of_week)\n    )\n\n  if (nlevels(data$dest) > 100) { \n    top_levels <- names(sort(table(data$dest), decreasing = TRUE)[1:100]) \n    data$dest <- forcats::fct_other(data$dest, keep = top_levels, other_level = \"Other\") \n  }\n  if (nlevels(data$origin) > 5) { \n    top_levels <- names(sort(table(data$origin), decreasing = TRUE)[1:5])\n    data$origin <- forcats::fct_other(data$origin, keep = top_levels, other_level = \"Other\") \n  }\n\n  message(paste(\"Размер данных для моделирования:\", nrow(data), \"строк,\", ncol(data), \"столбцов\"))\n  return(data)\n}\n```\n\nПодготовка данных для моделирования. Применяем функцию предобработки и разделяем данные на обучающую и тестовую выборки.\n\nПрименяем функцию предобработки к исходным данным и выбираем небольшую долю для анализа. Затем **разделяем данные на обучающую и тестовую выборки** в соотношении 70/30 для дальнейшего построения и оценки модели.\n\n```{r}\nflights_model_data <- preprocess_flights_data_for_model(flights, sample_fraction = 0.05) \n\n# Разделение данных на обучающую и тестовую выборки (70/30)\nset.seed(42) \ntrain_index_model <- sample(seq_len(nrow(flights_model_data)), size = floor(0.7 * nrow(flights_model_data)))\ntrain_data_model <- flights_model_data[train_index_model, ]\ntest_data_model <- flights_model_data[-train_index_model, ]\n\nmessage(paste(\"Размер обучающей выборки для модели:\", nrow(train_data_model), \"строк\"))\nmessage(paste(\"Размер тестовой выборки для модели:\", nrow(test_data_model), \"строк\"))\n```\n\nПостроение модели предсказания\n\n**Строим модель предсказания задержки вылета**, используя алгоритм **случайного леса (Random Forest)** на обучающей выборке. Конфигурируем модель с 100 деревьями и включаем расчет важности признаков.\n\n```{r}\nmessage(\"Построение модели предсказания (Random Forest)...\")\nmodel_rf_prediction <- ranger(\n  dep_delay ~ ., \n  data = train_data_model, \n  num.trees = 100, \n  importance = \"permutation\", \n  seed = 123,\n  num.threads = parallel::detectCores() - 1\n)\n\nmessage(\"Модель построена.\")\n```\n\nОценка производительности модели предсказания. Рассчитываем метрики MAE, RMSE и R-squared для оценки качества предсказаний модели.\n\n**Оцениваем качество предсказаний модели** на тестовой выборке. Для этого рассчитываем ключевые метрики: **MAE (средняя абсолютная ошибка)**, **RMSE (корень из средней квадратичной ошибки)** и **R-squared (коэффициент детерминации)**.\n```{r}\npredictions_model <- predict(model_rf_prediction, test_data_model)$predictions\n\n# Расчет метрик\nmae_model <- mean(abs(predictions_model - test_data_model$dep_delay))\nrmse_model <- sqrt(mean((predictions_model - test_data_model$dep_delay)^2))\nr_squared_model <- cor(predictions_model, test_data_model$dep_delay)^2\n\ncat(\"\\n### Метрики производительности модели предсказания на тестовой выборке:\\n\")\ncat(paste(\"  - **MAE:**\", round(mae_model, 2), \"минут\\n\"))\ncat(paste(\"  - **RMSE:**\", round(rmse_model, 2), \"минут\\n\"))\ncat(paste(\"  - **R-squared:**\", round(r_squared_model, 3), \"\\n\"))\n```\n\nВизуализация предсказаний модели Визуализируем соответствие между фактическими и предсказанными значениями задержки вылета.\n\n**Визуализируем соответствие между фактическими и предсказанными значениями** задержки вылета. Это позволяет наглядно оценить, насколько хорошо модель справляется с предсказанием.\n\n```{r}\ndf_prediction_results <- data.frame(\n  actual = test_data_model$dep_delay,\n  predicted = predictions_model\n)\n\nggplot(df_prediction_results, aes(x = actual, y = predicted)) +\n  geom_point(alpha = 0.1, color = \"darkgreen\") + # Другой цвет для отличия\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\", size = 0.8) +\n  labs(title = \"Фактические vs. Предсказанные задержки вылета (Модель)\",\n       x = \"Фактическая задержка (минуты)\",\n       y = \"Предсказанная задержка (минуты)\") +\n  theme_minimal() +\n  coord_cartesian(xlim = c(-30, 180), ylim = c(-30, 180)) # Ограничим оси\n\nmessage(\"Анализ предсказаний завершен.\")\n```\n","srcMarkdownNoYaml":"\n\n# Введение\n\nДля начала работы стоит составить цель и задачи анализа данных, чтобы ориентироваться на них при исследовании. Цель: проанализировать данные, составить выводы. Первичные задачи: Выявить зависимости задержек по авиакомпаниям, загруженность в зависимости от времени суток, предсказание задержки вылета и прибытия рейсов.\n\n[Информация о данных](https://cran.r-project.org/web/packages/nycflights23/nycflights23.pdf)\n\nЗагрузка необходимых библиотек:\n\n```{r}\nlibrary(nycflights23)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggsci)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(ranger)\n```\n\n# Топ авиакомпаний по задерживанию рейсов\n\nКод выводит авиакомпании, выводя лидера по задержке рейсов.\n```{r}\n# Расчёт средней задержки при вылете и прилёте для каждой авиакомпании\ndata <- flights |> \n  group_by(carrier) |> \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    flight_count = n()\n  ) |> \n  arrange(desc(avg_arr_delay))\n\ndata <- data |> \n  left_join(airlines, by = \"carrier\")\n\n# Просмотр топ-10 авиакомпаний с наибольшей средней задержкой при прилёте\nhead(data, 14)\n```\nСудя по результату, средняя задержка рейсов от авиакомпании Frontier Airlines Inc. занимает самое высокое положение среди рейсов от других авиакомпаний.\n\nДальше создается график для отображения данных результатов: средние задержки рейсов разных авиакомпаний с различными кол-вами рейсов.\n\n```{r}\n#| label: Средние задержки по авиакомпаниям\n#| fig-cap: \"График 1\"\nggplot(data, aes(x = avg_dep_delay, y = avg_arr_delay, \n                  color = name, size = flight_count)) +\n  geom_point(alpha = 0.6) +\n  theme_bw() +\n  labs(\n    color = \"Авиакомпания\",\n    size = \"Счётчик\\nрейсов\",\n    x = \"Средняя задержка вылета (мин)\",\n    y = \"Средняя задержка прилёта (мин)\",\n    title = \"Средние задержки по авиакомпаниям\"\n  ) +\n   scale_color_d3(palette = \"category20\") +\n  scale_size_continuous(range = c(2, 10), breaks = c(5000, 10000, 20000, 40000)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"vertical\",\n    legend.title = element_text(size = 7),\n    legend.text = element_text(size = 6)\n  )\n```\nКак и в таблице-топе авиакомпания Frontier Airlines Inc. также содержит наибольшое количество средних задерживаемых минут, но она содержит не большое количество рейсов, судя по размеру точки на графике, которая зависит от числа рейсов определенной компании.\n\nДалее создаётся график задержек рейсов различных авиакомпаний по месяцам, чтобы узнать ситуацию на все месяца.\n```{r}\n#| label: Расчёт средней задержки при вылете по месяцам\n#| fig-cap: \"График 2\"\nmonthly_delays <- flights |> \n  left_join(airlines, by = \"carrier\") |> \n  group_by(month) |> \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    carrier,\n    name\n  )\n\n# График средней задержки по месяцам\nggplot(monthly_delays, aes(x = month)) +\n  geom_line(aes(y = avg_dep_delay, color = \"Вылет\")) +\n  geom_line(aes(y = avg_arr_delay, color = \"Прибытие\")) +\n  facet_wrap(~name) +\n  labs(\n    title = \"Средняя задержка по месяцам (2023)\",\n    x = \"Месяц\",\n    y = \"Средняя задержка (мин)\",\n    color = \"Тип задержки\") +\n  scale_x_continuous(breaks = 1:12) +\n  theme_minimal()\n```\nСудя по \"графикам\", все компании, кроме одного, имеют одинаковую динамику средней задержки в зависимости от месяца. Месяц, когда происходит пик по задержке рейсов - это сентябрь (7-й месяц). \n\nРейсы от авиакомпании Envoy Air имеют отличную от рейсов других компаний структуру динамики задержек. Например, самый пик происходит в двух месяцев: май и ноябрь.\n\nУ всех компаний с одинаковой динамикой больше задержек вылета, чем прибытия.\n\nДалее идет подготовка данных к графику, показывающий зависимость задержек от времени дня.\n```{r}\n# Подготовка данных\nflights_hourly <- flights |>\n  left_join(airlines, by = \"carrier\") |> \n  mutate(hour_dep = floor(dep_time / 100)) |>\n  filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>\n  group_by(name, hour_dep) |>\n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    n = n(),\n    .groups = \"drop\"\n  )\n\n# Долгий формат для визуализации\nflights_long <- flights_hourly |>\n  pivot_longer(\n    cols = starts_with(\"avg_\"),\n    names_to = \"type\",\n    values_to = \"delay\"\n  )\n```\n\nСам график: \n```{r}\n#| label: Средняя задержка по времени суток и авиакомпании\n#| fig-cap: \"График 3\"\nggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +\n  geom_line(size = 1) +\n  facet_wrap(~ name) +\n  labs(\n    title = \"Средняя задержка по времени суток и авиакомпании\",\n    x = \"Час дня (вылет)\",\n    y = \"Средняя задержка (минуты)\",\n    color = \"Тип задержки\"\n  ) +\n  scale_color_manual(\n    values = c(\"avg_dep_delay\" = \"lightblue\", \"avg_arr_delay\" = \"pink\"),\n    labels = c(\"Вылет\", \"Прибытие\")\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.position = \"bottom\"\n  )\n```\nСитуация стабильная в перспективе разницы вылета и прибытия: их линии динамики совпадают и редко и слабо расходятся в отдельнызх случаях.\n\nОднако уже большая часть графиков отличается в плане динамики линий: в одних линия почти горизонтальная, а в других она сильно изгибается. Наблюдается тенденция, где пик линий динамик происходит в ранние часы дня, оппозиционо у разных компаний она происходит в разные части утренних часов. \n \nАвиакомпания Frontier Airlines Inc. имеет самую динамичную линию из всех рейсов, то есть имеет больше всего роста и спада.  \n\n# Предсказание задержки вылета и прибытия\n\nВ этой секции мы построим модель машинного обучения для предсказания задержки вылета. Мы будем использовать облегченную версию подхода для быстрой демонстрации.\n\nОпределение функции предобработки данных для моделирования. Эта функция специально разработана для подготовки данных к моделированию, включая сэмплирование и преобразование признаков.\n\n**Создаем функцию `preprocess_flights_data_for_model`**, которая стандартизирует процесс подготовки данных перед их использованием в модели машинного обучения. Функция включает **сэмплирование данных, фильтрацию пропущенных значений и выбросов, создание новых признаков и преобразование категориальных переменных** в формат, пригодный для моделирования.\n\n```{r}\npreprocess_flights_data_for_model <- function(data, sample_fraction = 0.1) {\n  message(\"Начало предобработки данных для моделирования...\")\n\n  # 1. Сэмплирование данных для ускорения\n  if (sample_fraction < 1) {\n    data <- data |>  sample_frac(sample_fraction, replace = FALSE)\n    message(paste0(\"Используется подмножество данных (\", round(sample_fraction*100), \"% от оригинала): \", nrow(data), \" строк.\"))\n  }\n\n  # 2. Базовая фильтрация отсутствующих значений для ключевых переменных\n  data <- data |> \n    filter(!is.na(dep_delay), !is.na(arr_delay), !is.na(air_time), !is.na(distance))\n\n  # 3. Умеренная фильтрация аномальных задержек (можно настроить)\n  data <- data |> \n    filter(dep_delay > -60, dep_delay < 240) # Задержки от -60 до 240 минут\n\n  # 4. Выбор и преобразование признаков\n  data <- data |> \n    mutate(\n      dep_hour = floor(sched_dep_time / 100),\n      flight_date = make_date(year, month, day),\n      day_of_week = wday(flight_date, label = TRUE)\n    ) |> \n    select(dep_delay, month, day, dep_hour, day_of_week, carrier, origin, dest, distance, air_time) |> \n    na.omit() \n\n  # 5. Преобразование категориальных переменных в факторы\n  data <- data |> \n    mutate(\n      carrier = as.factor(carrier),\n      origin = as.factor(origin),\n      dest = as.factor(dest),\n      month = as.factor(month),\n      day = as.factor(day), \n      dep_hour = as.factor(dep_hour),\n      day_of_week = as.factor(day_of_week)\n    )\n\n  if (nlevels(data$dest) > 100) { \n    top_levels <- names(sort(table(data$dest), decreasing = TRUE)[1:100]) \n    data$dest <- forcats::fct_other(data$dest, keep = top_levels, other_level = \"Other\") \n  }\n  if (nlevels(data$origin) > 5) { \n    top_levels <- names(sort(table(data$origin), decreasing = TRUE)[1:5])\n    data$origin <- forcats::fct_other(data$origin, keep = top_levels, other_level = \"Other\") \n  }\n\n  message(paste(\"Размер данных для моделирования:\", nrow(data), \"строк,\", ncol(data), \"столбцов\"))\n  return(data)\n}\n```\n\nПодготовка данных для моделирования. Применяем функцию предобработки и разделяем данные на обучающую и тестовую выборки.\n\nПрименяем функцию предобработки к исходным данным и выбираем небольшую долю для анализа. Затем **разделяем данные на обучающую и тестовую выборки** в соотношении 70/30 для дальнейшего построения и оценки модели.\n\n```{r}\nflights_model_data <- preprocess_flights_data_for_model(flights, sample_fraction = 0.05) \n\n# Разделение данных на обучающую и тестовую выборки (70/30)\nset.seed(42) \ntrain_index_model <- sample(seq_len(nrow(flights_model_data)), size = floor(0.7 * nrow(flights_model_data)))\ntrain_data_model <- flights_model_data[train_index_model, ]\ntest_data_model <- flights_model_data[-train_index_model, ]\n\nmessage(paste(\"Размер обучающей выборки для модели:\", nrow(train_data_model), \"строк\"))\nmessage(paste(\"Размер тестовой выборки для модели:\", nrow(test_data_model), \"строк\"))\n```\n\nПостроение модели предсказания\n\n**Строим модель предсказания задержки вылета**, используя алгоритм **случайного леса (Random Forest)** на обучающей выборке. Конфигурируем модель с 100 деревьями и включаем расчет важности признаков.\n\n```{r}\nmessage(\"Построение модели предсказания (Random Forest)...\")\nmodel_rf_prediction <- ranger(\n  dep_delay ~ ., \n  data = train_data_model, \n  num.trees = 100, \n  importance = \"permutation\", \n  seed = 123,\n  num.threads = parallel::detectCores() - 1\n)\n\nmessage(\"Модель построена.\")\n```\n\nОценка производительности модели предсказания. Рассчитываем метрики MAE, RMSE и R-squared для оценки качества предсказаний модели.\n\n**Оцениваем качество предсказаний модели** на тестовой выборке. Для этого рассчитываем ключевые метрики: **MAE (средняя абсолютная ошибка)**, **RMSE (корень из средней квадратичной ошибки)** и **R-squared (коэффициент детерминации)**.\n```{r}\npredictions_model <- predict(model_rf_prediction, test_data_model)$predictions\n\n# Расчет метрик\nmae_model <- mean(abs(predictions_model - test_data_model$dep_delay))\nrmse_model <- sqrt(mean((predictions_model - test_data_model$dep_delay)^2))\nr_squared_model <- cor(predictions_model, test_data_model$dep_delay)^2\n\ncat(\"\\n### Метрики производительности модели предсказания на тестовой выборке:\\n\")\ncat(paste(\"  - **MAE:**\", round(mae_model, 2), \"минут\\n\"))\ncat(paste(\"  - **RMSE:**\", round(rmse_model, 2), \"минут\\n\"))\ncat(paste(\"  - **R-squared:**\", round(r_squared_model, 3), \"\\n\"))\n```\n\nВизуализация предсказаний модели Визуализируем соответствие между фактическими и предсказанными значениями задержки вылета.\n\n**Визуализируем соответствие между фактическими и предсказанными значениями** задержки вылета. Это позволяет наглядно оценить, насколько хорошо модель справляется с предсказанием.\n\n```{r}\ndf_prediction_results <- data.frame(\n  actual = test_data_model$dep_delay,\n  predicted = predictions_model\n)\n\nggplot(df_prediction_results, aes(x = actual, y = predicted)) +\n  geom_point(alpha = 0.1, color = \"darkgreen\") + # Другой цвет для отличия\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\", size = 0.8) +\n  labs(title = \"Фактические vs. Предсказанные задержки вылета (Модель)\",\n       x = \"Фактическая задержка (минуты)\",\n       y = \"Предсказанная задержка (минуты)\") +\n  theme_minimal() +\n  coord_cartesian(xlim = c(-30, 180), ylim = c(-30, 180)) # Ограничим оси\n\nmessage(\"Анализ предсказаний завершен.\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Большие_данные_Quarto_project.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.28","editor":"visual","theme":"cosmo","title":"Исследование рейсов авиакомпаний Нью-Йорка 2023 года","author":["А.Ц. Жалсапов","М.Р. Зигангиров"],"abstract":"В статье применяются методы анализа данных с помощью языка программирования R и технической системы Quarto для закрепления навыков, предусмотренные в курсе \"Большие данные и аналитика\".\n\nКраткая информация о датасете, над которым проводится анализ: В апреле 2025 года появился новый датасет \"nycflights23\". Он почти идентичен другому датасету \"nycflights13\" (данные о рейсах авиалиний в Нью-Йорке 2013 года). Различие состоит в \"свежести\" данных с разницей 10 лет, что делает такой анализ данных более актуальным.\n"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
[
  {
    "objectID": "Большие_данные_Quarto_project.html",
    "href": "Большие_данные_Quarto_project.html",
    "title": "Исследование рейсов авиакомпаний Нью-Йорка 2023 года",
    "section": "",
    "text": "Введение\nДля начала работы стоит составить цель и задачи анализа данных, чтобы ориентироваться на них при исследовании. Цель: проанализировать данные, составить выводы. Первичные задачи: Выявить зависимости задержек по авиакомпаниям, загруженность в зависимости от времени суток, предсказание задержки вылета и прибытия рейсов.\nИнформация о данных\nЗагрузка необходимых библиотек:\n\n\nCode\nlibrary(nycflights23)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggsci)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(ranger)\n\n\n\n\nТоп авиакомпаний по задерживанию рейсов\nКод выводит авиакомпании, выводя лидера по задержке рейсов.\n\n\nCode\n# Расчёт средней задержки при вылете и прилёте для каждой авиакомпании\ndata &lt;- flights |&gt; \n  group_by(carrier) |&gt; \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    flight_count = n()\n  ) |&gt; \n  arrange(desc(avg_arr_delay))\n\ndata &lt;- data |&gt; \n  left_join(airlines, by = \"carrier\")\n\n# Просмотр топ-10 авиакомпаний с наибольшей средней задержкой при прилёте\nhead(data, 14)\n\n\n# A tibble: 14 × 5\n   carrier avg_dep_delay avg_arr_delay flight_count name                  \n   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;        &lt;int&gt; &lt;chr&gt;                 \n 1 F9              35.7        26.2            1286 Frontier Airlines Inc.\n 2 HA              22.9        21.4             366 Hawaiian Airlines Inc.\n 3 B6              23.8        15.6           66169 JetBlue Airways       \n 4 OO              19.8        13.7            6432 SkyWest Airlines Inc. \n 5 NK              18.2         9.89          15189 Spirit Air Lines      \n 6 UA              17.6         9.04          79641 United Air Lines Inc. \n 7 WN              16.1         5.76          12385 Southwest Airlines Co.\n 8 AA              14.2         5.27          40525 American Airlines Inc.\n 9 DL              15.1         1.64          61562 Delta Air Lines Inc.  \n10 MQ              10.5         0.119           357 Envoy Air             \n11 AS              12.0         0.0844         7843 Alaska Airlines Inc.  \n12 9E               7.44       -2.23          54141 Endeavor Air Inc.     \n13 YX               4.21       -4.64          88785 Republic Airline      \n14 G4               3.98       -5.88            671 Allegiant Air         \n\n\nСудя по результату, средняя задержка рейсов от авиакомпании Frontier Airlines Inc. занимает самое высокое положение среди рейсов от других авиакомпаний.\nДальше создается график для отображения данных результатов: средние задержки рейсов разных авиакомпаний с различными кол-вами рейсов.\n\n\nCode\nggplot(data, aes(x = avg_dep_delay, y = avg_arr_delay, \n                  color = name, size = flight_count)) +\n  geom_point(alpha = 0.6) +\n  theme_bw() +\n  labs(\n    color = \"Авиакомпания\",\n    size = \"Счётчик\\nрейсов\",\n    x = \"Средняя задержка вылета (мин)\",\n    y = \"Средняя задержка прилёта (мин)\",\n    title = \"Средние задержки по авиакомпаниям\"\n  ) +\n   scale_color_d3(palette = \"category20\") +\n  scale_size_continuous(range = c(2, 10), breaks = c(5000, 10000, 20000, 40000)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"vertical\",\n    legend.title = element_text(size = 7),\n    legend.text = element_text(size = 6)\n  )\n\n\n\n\n\nГрафик 1\n\n\n\n\nКак и в таблице-топе авиакомпания Frontier Airlines Inc. также содержит наибольшое количество средних задерживаемых минут, но она содержит не большое количество рейсов, судя по размеру точки на графике, которая зависит от числа рейсов определенной компании.\nДалее создаётся график задержек рейсов различных авиакомпаний по месяцам, чтобы узнать ситуацию на все месяца.\n\n\nCode\nmonthly_delays &lt;- flights |&gt; \n  left_join(airlines, by = \"carrier\") |&gt; \n  group_by(month) |&gt; \n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    carrier,\n    name\n  )\n\n# График средней задержки по месяцам\nggplot(monthly_delays, aes(x = month)) +\n  geom_line(aes(y = avg_dep_delay, color = \"Вылет\")) +\n  geom_line(aes(y = avg_arr_delay, color = \"Прибытие\")) +\n  facet_wrap(~name) +\n  labs(\n    title = \"Средняя задержка по месяцам (2023)\",\n    x = \"Месяц\",\n    y = \"Средняя задержка (мин)\",\n    color = \"Тип задержки\") +\n  scale_x_continuous(breaks = 1:12) +\n  theme_minimal()\n\n\n\n\n\nГрафик 2\n\n\n\n\nСудя по “графикам”, все компании, кроме одного, имеют одинаковую динамику средней задержки в зависимости от месяца. Месяц, когда происходит пик по задержке рейсов - это сентябрь (7-й месяц).\nРейсы от авиакомпании Envoy Air имеют отличную от рейсов других компаний структуру динамики задержек. Например, самый пик происходит в двух месяцев: май и ноябрь.\nУ всех компаний с одинаковой динамикой больше задержек вылета, чем прибытия.\nДалее идет подготовка данных к графику, показывающий зависимость задержек от времени дня.\n\n\nCode\n# Подготовка данных\nflights_hourly &lt;- flights |&gt;\n  left_join(airlines, by = \"carrier\") |&gt; \n  mutate(hour_dep = floor(dep_time / 100)) |&gt;\n  filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |&gt;\n  group_by(name, hour_dep) |&gt;\n  summarise(\n    avg_dep_delay = mean(dep_delay, na.rm = TRUE),\n    avg_arr_delay = mean(arr_delay, na.rm = TRUE),\n    n = n(),\n    .groups = \"drop\"\n  )\n\n# Долгий формат для визуализации\nflights_long &lt;- flights_hourly |&gt;\n  pivot_longer(\n    cols = starts_with(\"avg_\"),\n    names_to = \"type\",\n    values_to = \"delay\"\n  )\n\n\nСам график:\n\n\nCode\nggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +\n  geom_line(size = 1) +\n  facet_wrap(~ name) +\n  labs(\n    title = \"Средняя задержка по времени суток и авиакомпании\",\n    x = \"Час дня (вылет)\",\n    y = \"Средняя задержка (минуты)\",\n    color = \"Тип задержки\"\n  ) +\n  scale_color_manual(\n    values = c(\"avg_dep_delay\" = \"lightblue\", \"avg_arr_delay\" = \"pink\"),\n    labels = c(\"Вылет\", \"Прибытие\")\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\nГрафик 3\n\n\n\n\nСитуация стабильная в перспективе разницы вылета и прибытия: их линии динамики совпадают и редко и слабо расходятся в отдельнызх случаях.\nОднако уже большая часть графиков отличается в плане динамики линий: в одних линия почти горизонтальная, а в других она сильно изгибается. Наблюдается тенденция, где пик линий динамик происходит в ранние часы дня, оппозиционо у разных компаний она происходит в разные части утренних часов.\nАвиакомпания Frontier Airlines Inc. имеет самую динамичную линию из всех рейсов, то есть имеет больше всего роста и спада.\n\n\nПредсказание задержки вылета и прибытия\nВ этой секции мы построим модель машинного обучения для предсказания задержки вылета. Мы будем использовать облегченную версию подхода для быстрой демонстрации.\nОпределение функции предобработки данных для моделирования. Эта функция специально разработана для подготовки данных к моделированию, включая сэмплирование и преобразование признаков.\nСоздаем функцию preprocess_flights_data_for_model, которая стандартизирует процесс подготовки данных перед их использованием в модели машинного обучения. Функция включает сэмплирование данных, фильтрацию пропущенных значений и выбросов, создание новых признаков и преобразование категориальных переменных в формат, пригодный для моделирования.\n\n\nCode\npreprocess_flights_data_for_model &lt;- function(data, sample_fraction = 0.1) {\n  message(\"Начало предобработки данных для моделирования...\")\n\n  # 1. Сэмплирование данных для ускорения\n  if (sample_fraction &lt; 1) {\n    data &lt;- data |&gt;  sample_frac(sample_fraction, replace = FALSE)\n    message(paste0(\"Используется подмножество данных (\", round(sample_fraction*100), \"% от оригинала): \", nrow(data), \" строк.\"))\n  }\n\n  # 2. Базовая фильтрация отсутствующих значений для ключевых переменных\n  data &lt;- data |&gt; \n    filter(!is.na(dep_delay), !is.na(arr_delay), !is.na(air_time), !is.na(distance))\n\n  # 3. Умеренная фильтрация аномальных задержек (можно настроить)\n  data &lt;- data |&gt; \n    filter(dep_delay &gt; -60, dep_delay &lt; 240) # Задержки от -60 до 240 минут\n\n  # 4. Выбор и преобразование признаков\n  data &lt;- data |&gt; \n    mutate(\n      dep_hour = floor(sched_dep_time / 100),\n      flight_date = make_date(year, month, day),\n      day_of_week = wday(flight_date, label = TRUE)\n    ) |&gt; \n    select(dep_delay, month, day, dep_hour, day_of_week, carrier, origin, dest, distance, air_time) |&gt; \n    na.omit() \n\n  # 5. Преобразование категориальных переменных в факторы\n  data &lt;- data |&gt; \n    mutate(\n      carrier = as.factor(carrier),\n      origin = as.factor(origin),\n      dest = as.factor(dest),\n      month = as.factor(month),\n      day = as.factor(day), \n      dep_hour = as.factor(dep_hour),\n      day_of_week = as.factor(day_of_week)\n    )\n\n  if (nlevels(data$dest) &gt; 100) { \n    top_levels &lt;- names(sort(table(data$dest), decreasing = TRUE)[1:100]) \n    data$dest &lt;- forcats::fct_other(data$dest, keep = top_levels, other_level = \"Other\") \n  }\n  if (nlevels(data$origin) &gt; 5) { \n    top_levels &lt;- names(sort(table(data$origin), decreasing = TRUE)[1:5])\n    data$origin &lt;- forcats::fct_other(data$origin, keep = top_levels, other_level = \"Other\") \n  }\n\n  message(paste(\"Размер данных для моделирования:\", nrow(data), \"строк,\", ncol(data), \"столбцов\"))\n  return(data)\n}\n\n\nПодготовка данных для моделирования. Применяем функцию предобработки и разделяем данные на обучающую и тестовую выборки.\nПрименяем функцию предобработки к исходным данным и выбираем небольшую долю для анализа. Затем разделяем данные на обучающую и тестовую выборки в соотношении 70/30 для дальнейшего построения и оценки модели.\n\n\nCode\nflights_model_data &lt;- preprocess_flights_data_for_model(flights, sample_fraction = 0.05) \n\n# Разделение данных на обучающую и тестовую выборки (70/30)\nset.seed(42) \ntrain_index_model &lt;- sample(seq_len(nrow(flights_model_data)), size = floor(0.7 * nrow(flights_model_data)))\ntrain_data_model &lt;- flights_model_data[train_index_model, ]\ntest_data_model &lt;- flights_model_data[-train_index_model, ]\n\nmessage(paste(\"Размер обучающей выборки для модели:\", nrow(train_data_model), \"строк\"))\nmessage(paste(\"Размер тестовой выборки для модели:\", nrow(test_data_model), \"строк\"))\n\n\nПостроение модели предсказания\nСтроим модель предсказания задержки вылета, используя алгоритм случайного леса (Random Forest) на обучающей выборке. Конфигурируем модель с 100 деревьями и включаем расчет важности признаков.\n\n\nCode\nmessage(\"Построение модели предсказания (Random Forest)...\")\nmodel_rf_prediction &lt;- ranger(\n  dep_delay ~ ., \n  data = train_data_model, \n  num.trees = 100, \n  importance = \"permutation\", \n  seed = 123,\n  num.threads = parallel::detectCores() - 1\n)\n\nmessage(\"Модель построена.\")\n\n\nОценка производительности модели предсказания. Рассчитываем метрики MAE, RMSE и R-squared для оценки качества предсказаний модели.\nОцениваем качество предсказаний модели на тестовой выборке. Для этого рассчитываем ключевые метрики: MAE (средняя абсолютная ошибка), RMSE (корень из средней квадратичной ошибки) и R-squared (коэффициент детерминации).\n\n\nCode\npredictions_model &lt;- predict(model_rf_prediction, test_data_model)$predictions\n\n# Расчет метрик\nmae_model &lt;- mean(abs(predictions_model - test_data_model$dep_delay))\nrmse_model &lt;- sqrt(mean((predictions_model - test_data_model$dep_delay)^2))\nr_squared_model &lt;- cor(predictions_model, test_data_model$dep_delay)^2\n\ncat(\"\\n### Метрики производительности модели предсказания на тестовой выборке:\\n\")\n\n\n\n### Метрики производительности модели предсказания на тестовой выборке:\n\n\nCode\ncat(paste(\"  - **MAE:**\", round(mae_model, 2), \"минут\\n\"))\n\n\n  - **MAE:** 20.95 минут\n\n\nCode\ncat(paste(\"  - **RMSE:**\", round(rmse_model, 2), \"минут\\n\"))\n\n\n  - **RMSE:** 34.5 минут\n\n\nCode\ncat(paste(\"  - **R-squared:**\", round(r_squared_model, 3), \"\\n\"))\n\n\n  - **R-squared:** 0.086 \n\n\nВизуализация предсказаний модели Визуализируем соответствие между фактическими и предсказанными значениями задержки вылета.\nВизуализируем соответствие между фактическими и предсказанными значениями задержки вылета. Это позволяет наглядно оценить, насколько хорошо модель справляется с предсказанием.\n\n\nCode\ndf_prediction_results &lt;- data.frame(\n  actual = test_data_model$dep_delay,\n  predicted = predictions_model\n)\n\nggplot(df_prediction_results, aes(x = actual, y = predicted)) +\n  geom_point(alpha = 0.1, color = \"darkgreen\") + # Другой цвет для отличия\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\", size = 0.8) +\n  labs(title = \"Фактические vs. Предсказанные задержки вылета (Модель)\",\n       x = \"Фактическая задержка (минуты)\",\n       y = \"Предсказанная задержка (минуты)\") +\n  theme_minimal() +\n  coord_cartesian(xlim = c(-30, 180), ylim = c(-30, 180)) # Ограничим оси\n\n\n\n\n\n\n\n\n\nCode\nmessage(\"Анализ предсказаний завершен.\")"
  }
]
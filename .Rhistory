labs(
title = "Средняя задержка по времени суток и авиакомпании",
x = "Час дня (вылет)",
y = "Средняя задержка (минуты)",
color = "Тип задержки"
) +
scale_color_manual(
values = c("avg_dep_delay" = "lightblue", "avg_arr_delay" = "pink"),
labels = c("Вылет", "Прибытие")
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
legend.position = "bottom"
)
View(flights_hourly)
View(flights_hourly)
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier")
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier")
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier") |>
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Долгий формат для визуализации
flights_long <- flights_hourly |>
pivot_longer(
cols = starts_with("avg_"),
names_to = "type",
values_to = "delay"
)
# Отображение
ggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +
geom_line(size = 1) +
facet_wrap(~ name) +
labs(
title = "Средняя задержка по времени суток и авиакомпании",
x = "Час дня (вылет)",
y = "Средняя задержка (минуты)",
color = "Тип задержки"
) +
scale_color_manual(
values = c("avg_dep_delay" = "lightblue", "avg_arr_delay" = "pink"),
labels = c("Вылет", "Прибытие")
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
legend.position = "bottom"
)
preprocess_flights_data_for_model <- function(data, sample_fraction = 0.1) {
message("Начало предобработки данных для моделирования...")
# 1. Сэмплирование данных для ускорения
if (sample_fraction < 1) {
data <- data %>% sample_frac(sample_fraction, replace = FALSE)
message(paste0("Используется подмножество данных (", round(sample_fraction*100), "% от оригинала): ", nrow(data), " строк."))
}
# 2. Базовая фильтрация отсутствующих значений для ключевых переменных
data <- data %>%
filter(!is.na(dep_delay), !is.na(arr_delay), !is.na(air_time), !is.na(distance))
# 3. Умеренная фильтрация аномальных задержек (можно настроить)
data <- data %>%
filter(dep_delay > -60, dep_delay < 240) # Задержки от -60 до 240 минут
# 4. Выбор и преобразование признаков
data <- data %>%
mutate(
dep_hour = floor(sched_dep_time / 100),
# Добавляем day_of_week как важный признак
flight_date = make_date(year, month, day),
day_of_week = wday(flight_date, label = TRUE)
) %>%
select(dep_delay, month, day, dep_hour, day_of_week, carrier, origin, dest, distance, air_time) %>%
na.omit() # Удаляем NA после выбора признаков
# 5. Преобразование категориальных переменных в факторы
data <- data %>%
mutate(
carrier = as.factor(carrier),
origin = as.factor(origin),
dest = as.factor(dest),
month = as.factor(month),
day = as.factor(day), # День как фактор
dep_hour = as.factor(dep_hour),
day_of_week = as.factor(day_of_week)
)
# Обработка факторов с большим количеством уровней (например, 'dest')
# Если 'dest' имеет слишком много уровней, объединяем редкие в 'Other'
if (nlevels(data$dest) > 100) { # Порог можно настроить
top_levels <- names(sort(table(data$dest), decreasing = TRUE)[1:100]) # Оставляем 100 самых частых
data$dest <- forcats::fct_other(data$dest, keep = top_levels, other_level = "Other") # Использование fct_other из forcats
}
if (nlevels(data$origin) > 5) { # Порог можно настроить, для 'origin' обычно 3
top_levels <- names(sort(table(data$origin), decreasing = TRUE)[1:5])
data$origin <- forcats::fct_other(data$origin, keep = top_levels, other_level = "Other") # Использование fct_other из forcats
}
message(paste("Размер данных для моделирования:", nrow(data), "строк,", ncol(data), "столбцов"))
return(data)
}
# Загрузка и облегченная предобработка данных для моделирования
# Использован глобальный объект 'flights' из пакета nycflights13
flights_model_data <- preprocess_flights_data_for_model(flights, sample_fraction = 0.05) # Уменьшаем до 5% для быстрой проверки
# Разделение данных на обучающую и тестовую выборки (70/30)
set.seed(42) # Другой seed для разделения модели, чтобы отличался от общего анализа
train_index_model <- sample(seq_len(nrow(flights_model_data)), size = floor(0.7 * nrow(flights_model_data)))
train_data_model <- flights_model_data[train_index_model, ]
test_data_model <- flights_model_data[-train_index_model, ]
message(paste("Размер обучающей выборки для модели:", nrow(train_data_model), "строк"))
message(paste("Размер тестовой выборки для модели:", nrow(test_data_model), "строк"))
install.packages("hrbrthemes")
library(nycflights23)
library(dplyr)
library(ggplot2)
library(ggsci)
library(lubridate)
library(tidyverse)
library(hrbrthemes)
library(ranger)
preprocess_flights_data_for_model <- function(data, sample_fraction = 0.1) {
message("Начало предобработки данных для моделирования...")
# 1. Сэмплирование данных для ускорения
if (sample_fraction < 1) {
data <- data %>% sample_frac(sample_fraction, replace = FALSE)
message(paste0("Используется подмножество данных (", round(sample_fraction*100), "% от оригинала): ", nrow(data), " строк."))
}
# 2. Базовая фильтрация отсутствующих значений для ключевых переменных
data <- data %>%
filter(!is.na(dep_delay), !is.na(arr_delay), !is.na(air_time), !is.na(distance))
# 3. Умеренная фильтрация аномальных задержек (можно настроить)
data <- data %>%
filter(dep_delay > -60, dep_delay < 240) # Задержки от -60 до 240 минут
# 4. Выбор и преобразование признаков
data <- data %>%
mutate(
dep_hour = floor(sched_dep_time / 100),
# Добавляем day_of_week как важный признак
flight_date = make_date(year, month, day),
day_of_week = wday(flight_date, label = TRUE)
) %>%
select(dep_delay, month, day, dep_hour, day_of_week, carrier, origin, dest, distance, air_time) %>%
na.omit() # Удаляем NA после выбора признаков
# 5. Преобразование категориальных переменных в факторы
data <- data %>%
mutate(
carrier = as.factor(carrier),
origin = as.factor(origin),
dest = as.factor(dest),
month = as.factor(month),
day = as.factor(day), # День как фактор
dep_hour = as.factor(dep_hour),
day_of_week = as.factor(day_of_week)
)
# Обработка факторов с большим количеством уровней (например, 'dest')
# Если 'dest' имеет слишком много уровней, объединяем редкие в 'Other'
if (nlevels(data$dest) > 100) { # Порог можно настроить
top_levels <- names(sort(table(data$dest), decreasing = TRUE)[1:100]) # Оставляем 100 самых частых
data$dest <- forcats::fct_other(data$dest, keep = top_levels, other_level = "Other") # Использование fct_other из forcats
}
if (nlevels(data$origin) > 5) { # Порог можно настроить, для 'origin' обычно 3
top_levels <- names(sort(table(data$origin), decreasing = TRUE)[1:5])
data$origin <- forcats::fct_other(data$origin, keep = top_levels, other_level = "Other") # Использование fct_other из forcats
}
message(paste("Размер данных для моделирования:", nrow(data), "строк,", ncol(data), "столбцов"))
return(data)
}
# Загрузка и облегченная предобработка данных для моделирования
# Использован глобальный объект 'flights' из пакета nycflights13
flights_model_data <- preprocess_flights_data_for_model(flights, sample_fraction = 0.05) # Уменьшаем до 5% для быстрой проверки
# Разделение данных на обучающую и тестовую выборки (70/30)
set.seed(42) # Другой seed для разделения модели, чтобы отличался от общего анализа
train_index_model <- sample(seq_len(nrow(flights_model_data)), size = floor(0.7 * nrow(flights_model_data)))
train_data_model <- flights_model_data[train_index_model, ]
test_data_model <- flights_model_data[-train_index_model, ]
message(paste("Размер обучающей выборки для модели:", nrow(train_data_model), "строк"))
message(paste("Размер тестовой выборки для модели:", nrow(test_data_model), "строк"))
message("Построение модели предсказания (Random Forest)...")
# Убедитесь, что все необходимые пакеты загружены, особенно 'ranger'
# Формула для ranger: response_variable ~ predictor1 + predictor2 + ...
# . означает "все остальные переменные"
model_rf_prediction <- ranger(
dep_delay ~ .,
data = train_data_model,
num.trees = 100, # Уменьшено количество деревьев для ускорения
importance = "permutation", # Важность признаков
seed = 123,
num.threads = parallel::detectCores() - 1 # Использование всех ядер, кроме одного
)
message("Модель построена.")
message("Оценка производительности модели предсказания на тестовой выборке...")
predictions_model <- predict(model_rf_prediction, test_data_model)$predictions
# Расчет метрик
mae_model <- mean(abs(predictions_model - test_data_model$dep_delay))
rmse_model <- sqrt(mean((predictions_model - test_data_model$dep_delay)^2))
r_squared_model <- cor(predictions_model, test_data_model$dep_delay)^2
cat("\n### Метрики производительности модели предсказания на тестовой выборке:\n")
cat(paste("  - **MAE:**", round(mae_model, 2), "минут\n"))
cat(paste("  - **RMSE:**", round(rmse_model, 2), "минут\n"))
cat(paste("  - **R-squared:**", round(r_squared_model, 3), "\n"))
message("Построение графика предсказаний модели...")
df_prediction_results <- data.frame(
actual = test_data_model$dep_delay,
predicted = predictions_model
)
ggplot(df_prediction_results, aes(x = actual, y = predicted)) +
geom_point(alpha = 0.1, color = "darkgreen") + # Другой цвет для отличия
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed", size = 0.8) +
labs(title = "Фактические vs. Предсказанные задержки вылета (Модель)",
x = "Фактическая задержка (минуты)",
y = "Предсказанная задержка (минуты)") +
theme_minimal() +
coord_cartesian(xlim = c(-30, 180), ylim = c(-30, 180)) # Ограничим оси
message("Анализ предсказаний завершен.")
# Загрузка библиотек
library(tidyverse)
library(nycflights23)
library(lubridate)
library(tidymodels)
library(doParallel)
# Подготовка данных
flights_data <- flights %>%
select(dep_delay, sched_dep_time, year, month, day, carrier, origin, dest, distance, air_time) %>%
mutate(
dep_hour = floor(sched_dep_time / 100),
flight_date = make_date(year, month, day),
day_of_week = wday(flight_date, label = TRUE)
) %>%
select(-sched_dep_time, -flight_date, -year) %>%
drop_na() %>%
filter(dep_delay > -60, dep_delay < 240) %>%
mutate(across(c(month, day, carrier, origin, dest, dep_hour, day_of_week), as.factor))
install.packages("doParallel")
library(doParallel)
# Подготовка данных
flights_data <- flights %>%
select(dep_delay, sched_dep_time, year, month, day, carrier, origin, dest, distance, air_time) %>%
mutate(
dep_hour = floor(sched_dep_time / 100),
flight_date = make_date(year, month, day),
day_of_week = wday(flight_date, label = TRUE)
) %>%
select(-sched_dep_time, -flight_date, -year) %>%
drop_na() %>%
filter(dep_delay > -60, dep_delay < 240) %>%
mutate(across(c(month, day, carrier, origin, dest, dep_hour, day_of_week), as.factor))
# Сэмплирование для скорости
set.seed(42)
flights_sample <- flights_data %>% sample_frac(0.05)
# Разделение на train/test
set.seed(123)
split <- initial_split(flights_sample, prop = 0.8, strata = dep_delay)
train_data <- training(split)
test_data <- testing(split)
# Кросс-валидация
set.seed(123)
cv_folds <- vfold_cv(train_data, v = 5, strata = dep_delay)
# Рецепт
flight_recipe <- recipe(dep_delay ~ ., data = train_data) %>%
step_other(dest, threshold = 0.01) %>%
step_other(origin, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# Определение моделей
rf_model <- rand_forest(mtry = 5, trees = 200, min_n = 5) %>%
set_engine("ranger", num.threads = parallel::detectCores() - 1) %>%
set_mode("regression")
lm_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
xgb_model <- boost_tree(trees = 200, learn_rate = 0.1) %>%
set_engine("xgboost") %>%
set_mode("regression")
# Объединение в workflow_set
model_set <- workflow_set(
preproc = list(flight_recipe = flight_recipe),
models = list(
"Random Forest" = rf_model,
"Linear Model" = lm_model,
"XGBoost" = xgb_model
)
)
# Обучение моделей с кросс-валидацией
cl <- makeCluster(parallel::detectCores() - 1)
registerDoParallel(cl)
set.seed(456)
model_results <- model_set %>%
workflow_map(
resamples = cv_folds,
metrics = metric_set(rmse, rsq, mae),
control = control_grid(save_pred = TRUE)
)
stopCluster(cl)
# Визуализация результатов
autoplot(model_results, metric = "rmse") + theme_minimal()
# Разделение на train/test
set.seed(123)
split <- initial_split(flights_sample, prop = 0.8, strata = dep_delay)
train_data <- training(split)
test_data <- testing(split)
# Кросс-валидация
set.seed(123)
cv_folds <- vfold_cv(train_data, v = 5, strata = dep_delay)
# Рецепт
flight_recipe <- recipe(dep_delay ~ ., data = train_data) %>%
step_other(dest, threshold = 0.01) %>%
step_other(origin, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
# Определение моделей
rf_model <- rand_forest(mtry = 5, trees = 200, min_n = 5) %>%
set_engine("ranger", num.threads = parallel::detectCores() - 1) %>%
set_mode("regression")
lm_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# Объединение в workflow_set
model_set <- workflow_set(
preproc = list(flight_recipe = flight_recipe),
models = list(
"Random Forest" = rf_model,
"Linear Model" = lm_model
)
)
# Обучение моделей с кросс-валидацией
cl <- makeCluster(parallel::detectCores() - 1)
registerDoParallel(cl)
set.seed(456)
model_results <- model_set %>%
workflow_map(
resamples = cv_folds,
metrics = metric_set(rmse, rsq, mae),
control = control_grid(save_pred = TRUE)
)
stopCluster(cl)
# Визуализация результатов
autoplot(model_results, metric = "rmse") + theme_minimal()
autoplot(model_results, metric = "rsq") + theme_minimal()
# Таблица с ранжированием
rank_results(model_results, select_best = TRUE)
# Визуализация результатов
autoplot(model_results, metric = "rmse") + theme_minimal()
autoplot(model_results, metric = "rsq") + theme_minimal()
# Таблица с ранжированием
rank_results(model_results, select_best = TRUE)
# Выбор лучшей модели
best_model <- model_results %>%
rank_results() %>%
filter(.metric == "rmse") %>%
arrange(mean) %>%
slice(1)
best_model_name <- best_model$wflow_id
# Финальное обучение
final_wf <- model_results %>%
extract_workflow(best_model_name) %>%
fit(data = train_data)
# Предсказания на тестовой выборке
test_preds <- predict(final_wf, test_data) %>%
bind_cols(truth = test_data$dep_delay)
# Метрики на тесте
test_preds %>% metrics(truth = truth, estimate = .pred)
# Визуализация: фактические vs предсказанные
test_preds %>%
ggplot(aes(x = truth, y = .pred)) +
geom_point(alpha = 0.1, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Фактические vs Предсказанные задержки",
x = "Фактическая задержка", y = "Предсказанная") +
theme_minimal()
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier") |>
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Долгий формат для визуализации
flights_long <- flights_hourly |>
pivot_longer(
cols = starts_with("avg_"),
names_to = "type",
values_to = "delay"
)
# Отображение
ggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +
geom_line(size = 1) +
facet_wrap(~ name) +
labs(
title = "Средняя задержка по времени суток и авиакомпании",
x = "Час дня (вылет)",
y = "Средняя задержка (минуты)",
color = "Тип задержки"
) +
scale_color_manual(
values = c("avg_dep_delay" = "lightblue", "avg_arr_delay" = "pink"),
labels = c("Вылет", "Прибытие")
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
legend.position = "bottom"
)
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier") |>
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Долгий формат для визуализации
flights_long <- flights_hourly |>
pivot_longer(
cols = starts_with("avg_"),
names_to = "type",
values_to = "delay"
)
# Отображение
ggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +
geom_line(size = 1) +
facet_wrap(~ name) +
labs(
title = "Средняя задержка по времени суток и авиакомпании",
x = "Час дня (вылет)",
y = "Средняя задержка (минуты)",
color = "Тип задержки"
) +
scale_color_manual(
values = c("avg_dep_delay" = "lightblue", "avg_arr_delay" = "pink"),
labels = c("Вылет", "Прибытие")
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
legend.position = "bottom"
)
message("THE END.")
View(flights_hourly)
View(flights_hourly)
# Подготовка данных
flights_hourly <- flights |>
left_join(airlines, by = "carrier") |>
mutate(hour_dep = floor(dep_time / 100)) |>
filter(!is.na(hour_dep), !is.na(dep_delay), !is.na(arr_delay)) |>
group_by(name, hour_dep) |>
summarise(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
n = n(),
.groups = "drop"
)
# Долгий формат для визуализации
flights_long <- flights_hourly |>
pivot_longer(
cols = starts_with("avg_"),
names_to = "type",
values_to = "delay"
)
#| label: Средняя задержка по времени суток и авиакомпании
#| fig-cap: "График 3"
ggplot(flights_long, aes(x = hour_dep, y = delay, color = type)) +
geom_line(size = 1) +
facet_wrap(~ name) +
labs(
title = "Средняя задержка по времени суток и авиакомпании",
x = "Час дня (вылет)",
y = "Средняя задержка (минуты)",
color = "Тип задержки"
) +
scale_color_manual(
values = c("avg_dep_delay" = "lightblue", "avg_arr_delay" = "pink"),
labels = c("Вылет", "Прибытие")
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold", size = 10),
legend.position = "bottom"
)
